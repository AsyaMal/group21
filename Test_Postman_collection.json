{
	"info": {
		"_postman_id": "8eb2d0bf-8a0d-4f8f-8369-afaa283b6c34",
		"name": "groupe_21_HT_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. {{url}}login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678b",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. {{url}}user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function () {const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]}\r",
							"pm.response.to.have.jsonSchema(schema)  \r",
							"}\r",
							");\r",
							"\r",
							"    let req = JSON.parse(request.data);\r",
							"    let resp = pm.response.json();\r",
							"    let salary = req.salary;\r",
							"    let resp_salary = resp.start_qa_salary;\r",
							"    pm.test(\"Salary\", function () {\r",
							"    pm.expect(salary).to.eql(resp_salary);\r",
							"    });\r",
							"\r",
							"\r",
							"    let resp_salary2 = resp.qa_salary_after_6_months;\r",
							"    pm.test(\"Salary*2\", function () {\r",
							"    pm.expect(salary*2).to.eql(resp_salary2);\r",
							"    });\r",
							"\r",
							"    let resp_salary2_9 = resp.qa_salary_after_12_months;\r",
							"    pm.test(\"Salary*2.9\", function () {\r",
							"    pm.expect(salary*2.9).to.eql(resp_salary2_9);\r",
							"    });\r",
							"\r",
							"    let resp_salary4 = resp.person.u_salary_1_5_year;\r",
							"    pm.test(\"Salary*4\", function () {\r",
							"    pm.expect(salary*4).to.eql(resp_salary4);\r",
							"    });\r",
							"\r",
							"// console.log(resp_salary4);\r",
							"// let jsonData = JSON.parse(responseBody);\r",
							"// pm.environment.set(person.u_salary_1_5_year, jsonData.data.person.u_salary_1_5_year);\r",
							"// console.log(jsonData);\r",
							"// console.log(jsonData.data.person.u_salary_1_5_year);\r",
							"// let resp_salary4 = resp.person.u_salary_1_5_year;\r",
							"// let responseObject = JSON.parse(responseBody);\r",
							"// let u_salary_1_5_year = responseObject.data.u_salary_1_5_year;  \r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\":{{age}},\r\n    \"salary\":{{salary}},\r\n    \"name\":\"Ivan\",\r\n    \"auth_token\":\"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. {{url}}new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function () {const schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]}\r",
							"pm.response.to.have.jsonSchema(schema)  \r",
							"}\r",
							");\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// Resp.\r",
							"// {'name':name,\r",
							"//   'age': int(age),\r",
							"//   'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"\r",
							"// let salary = JSON.parse(request.data.salary);\r",
							"//     let resp = pm.response.json();\r",
							"//     // let salary = request.data.salary;\r",
							"//     let resp_salary = resp.salary[1];\r",
							"//     pm.test(\"Salary\", function () {\r",
							"//     pm.expect(salary*2).to.eql(resp_salary);\r",
							"//     });\r",
							"//     console.log(salary);\r",
							"\r",
							"\r",
							"// let resp = pm.response.json();\r",
							"// let weight = request.data.weight;\r",
							"// let d_food = resp.daily_food;\r",
							"// let d_sleep = resp.daily_sleep;\r",
							"// console.log(d_food);\r",
							"//     pm.test(\"Daily_food\", function () {\r",
							"//     pm.expect(d_food).to.eql(weight*0.012);\r",
							"//     });\r",
							"let sal = JSON.parse(request.data.salary);\r",
							"let salary = pm.response.json().salary[0];\r",
							"pm.test(\"Salary1\", function () {\r",
							"    pm.expect(salary).to.eql(sal);\r",
							"});\r",
							"\r",
							"let salary2 = pm.response.json().salary[1];\r",
							"pm.test(\"Salary2\", function () {\r",
							"    pm.expect(salary2).to.eql(\"2000\");\r",
							"});\r",
							"let salary3 = pm.response.json().salary[2];\r",
							"pm.test(\"Salary2\", function () {\r",
							"    pm.expect(salary3).to.eql(\"3000\");\r",
							"    });\r",
							"\r",
							"// const parsed_salary2 = parseInt(salary2);\r",
							"// const parsed_salary3 = parseInt(salary3);\r",
							"\r",
							"pm.test(\"S3moreS2\", function() {\r",
							"     pm.expect(salary3>salary2).to.be.true;\r",
							"});\r",
							"pm.test(\"S3moreS1\", function() {\r",
							"     pm.expect(salary3>salary).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. {{url}}test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function () {const schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]}\r",
							"pm.response.to.have.jsonSchema(schema)  \r",
							"}\r",
							");\r",
							"\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let weight = request.data.weight;\r",
							"let d_food = resp.daily_food;\r",
							"let d_sleep = resp.daily_sleep;\r",
							"console.log(d_food);\r",
							"    pm.test(\"Daily_food\", function () {\r",
							"    pm.expect(d_food).to.eql(weight*0.012);\r",
							"    });\r",
							"    pm.test(\"Daily_sleep\", function () {\r",
							"    pm.expect(d_sleep).to.eql(weight*2.5);\r",
							"    });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "70",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. {{url}}get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function () {const schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema)  \r",
							"}\r",
							");\r",
							"\r",
							"let resp = pm.response.json();\r",
							"let name = request.data.name;\r",
							"let resp_name = resp.name;\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(resp_name).to.eql(name);\r",
							"    });\r",
							"\r",
							"let age = request.data.age;\r",
							"let resp_age = resp.age;\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(resp_age).to.eql(age);\r",
							"    });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. {{url}}currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"// function getRandomIntInclusive(min, max) {\r",
							"//   min = Math.ceil(min);\r",
							"//   max = Math.floor(max);\r",
							"//   return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"// function getRandomIntInclusive(min, max) {\r",
							"// }\r",
							"// alert( random(1, 510) );\r",
							"let Cur_ID = Math.floor(Math.random() * 510) + 1;\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", jsonData.Cur_ID);\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Cur_Abbreviation\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. {{url}}curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test('Schema is valid', function () {const schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema)  \r",
							"}\r",
							");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "456",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}